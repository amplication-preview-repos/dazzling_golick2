/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { EncryptionDetails } from "./EncryptionDetails";
import { EncryptionDetailsCountArgs } from "./EncryptionDetailsCountArgs";
import { EncryptionDetailsFindManyArgs } from "./EncryptionDetailsFindManyArgs";
import { EncryptionDetailsFindUniqueArgs } from "./EncryptionDetailsFindUniqueArgs";
import { CreateEncryptionDetailsArgs } from "./CreateEncryptionDetailsArgs";
import { UpdateEncryptionDetailsArgs } from "./UpdateEncryptionDetailsArgs";
import { DeleteEncryptionDetailsArgs } from "./DeleteEncryptionDetailsArgs";
import { User } from "../../user/base/User";
import { EncryptionDetailsService } from "../encryptionDetails.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => EncryptionDetails)
export class EncryptionDetailsResolverBase {
  constructor(
    protected readonly service: EncryptionDetailsService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "EncryptionDetails",
    action: "read",
    possession: "any",
  })
  async _encryptionDetailsItemsMeta(
    @graphql.Args() args: EncryptionDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [EncryptionDetails])
  @nestAccessControl.UseRoles({
    resource: "EncryptionDetails",
    action: "read",
    possession: "any",
  })
  async encryptionDetailsItems(
    @graphql.Args() args: EncryptionDetailsFindManyArgs
  ): Promise<EncryptionDetails[]> {
    return this.service.encryptionDetailsItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => EncryptionDetails, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "EncryptionDetails",
    action: "read",
    possession: "own",
  })
  async encryptionDetails(
    @graphql.Args() args: EncryptionDetailsFindUniqueArgs
  ): Promise<EncryptionDetails | null> {
    const result = await this.service.encryptionDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EncryptionDetails)
  @nestAccessControl.UseRoles({
    resource: "EncryptionDetails",
    action: "create",
    possession: "any",
  })
  async createEncryptionDetails(
    @graphql.Args() args: CreateEncryptionDetailsArgs
  ): Promise<EncryptionDetails> {
    return await this.service.createEncryptionDetails({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => EncryptionDetails)
  @nestAccessControl.UseRoles({
    resource: "EncryptionDetails",
    action: "update",
    possession: "any",
  })
  async updateEncryptionDetails(
    @graphql.Args() args: UpdateEncryptionDetailsArgs
  ): Promise<EncryptionDetails | null> {
    try {
      return await this.service.updateEncryptionDetails({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => EncryptionDetails)
  @nestAccessControl.UseRoles({
    resource: "EncryptionDetails",
    action: "delete",
    possession: "any",
  })
  async deleteEncryptionDetails(
    @graphql.Args() args: DeleteEncryptionDetailsArgs
  ): Promise<EncryptionDetails | null> {
    try {
      return await this.service.deleteEncryptionDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: EncryptionDetails
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
