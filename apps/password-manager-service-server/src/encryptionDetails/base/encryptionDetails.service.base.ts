/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  EncryptionDetails as PrismaEncryptionDetails,
  User as PrismaUser,
} from "@prisma/client";

export class EncryptionDetailsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.EncryptionDetailsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.encryptionDetails.count(args);
  }

  async encryptionDetailsItems<T extends Prisma.EncryptionDetailsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.EncryptionDetailsFindManyArgs>
  ): Promise<PrismaEncryptionDetails[]> {
    return this.prisma.encryptionDetails.findMany<Prisma.EncryptionDetailsFindManyArgs>(
      args
    );
  }
  async encryptionDetails<T extends Prisma.EncryptionDetailsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.EncryptionDetailsFindUniqueArgs>
  ): Promise<PrismaEncryptionDetails | null> {
    return this.prisma.encryptionDetails.findUnique(args);
  }
  async createEncryptionDetails<T extends Prisma.EncryptionDetailsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EncryptionDetailsCreateArgs>
  ): Promise<PrismaEncryptionDetails> {
    return this.prisma.encryptionDetails.create<T>(args);
  }
  async updateEncryptionDetails<T extends Prisma.EncryptionDetailsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.EncryptionDetailsUpdateArgs>
  ): Promise<PrismaEncryptionDetails> {
    return this.prisma.encryptionDetails.update<T>(args);
  }
  async deleteEncryptionDetails<T extends Prisma.EncryptionDetailsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.EncryptionDetailsDeleteArgs>
  ): Promise<PrismaEncryptionDetails> {
    return this.prisma.encryptionDetails.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.encryptionDetails
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
