/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PasswordEntry as PrismaPasswordEntry,
  User as PrismaUser,
} from "@prisma/client";

export class PasswordEntryServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PasswordEntryCountArgs, "select">
  ): Promise<number> {
    return this.prisma.passwordEntry.count(args);
  }

  async passwordEntries<T extends Prisma.PasswordEntryFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PasswordEntryFindManyArgs>
  ): Promise<PrismaPasswordEntry[]> {
    return this.prisma.passwordEntry.findMany<Prisma.PasswordEntryFindManyArgs>(
      args
    );
  }
  async passwordEntry<T extends Prisma.PasswordEntryFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PasswordEntryFindUniqueArgs>
  ): Promise<PrismaPasswordEntry | null> {
    return this.prisma.passwordEntry.findUnique(args);
  }
  async createPasswordEntry<T extends Prisma.PasswordEntryCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PasswordEntryCreateArgs>
  ): Promise<PrismaPasswordEntry> {
    return this.prisma.passwordEntry.create<T>(args);
  }
  async updatePasswordEntry<T extends Prisma.PasswordEntryUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PasswordEntryUpdateArgs>
  ): Promise<PrismaPasswordEntry> {
    return this.prisma.passwordEntry.update<T>(args);
  }
  async deletePasswordEntry<T extends Prisma.PasswordEntryDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PasswordEntryDeleteArgs>
  ): Promise<PrismaPasswordEntry> {
    return this.prisma.passwordEntry.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.passwordEntry
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
